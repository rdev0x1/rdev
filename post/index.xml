<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Ramon Dev&#39;s blog</title>
    <link>https://rdev.pages.dev/post/</link>
    <description>Recent content in Posts on Ramon Dev&#39;s blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://rdev.pages.dev/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Primacy of Imposition: The Root of Human Conflict</title>
      <link>https://rdev.pages.dev/2025/02-12-the-primacy-of-imposition-the-root-of-human-conflict/</link>
      <pubDate>Wed, 12 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://rdev.pages.dev/2025/02-12-the-primacy-of-imposition-the-root-of-human-conflict/</guid>
      <description>&lt;h2 id=&#34;introduction-the-essence-of-conflict&#34;&gt;Introduction: The Essence of Conflict&lt;/h2&gt;&#xA;&lt;p&gt;All human conflict, at its core, revolves around the desire to impose one’s will&#xA;upon another.&#xA;Whether the issue appears to stem from a scarcity of resources, fear,&#xA;insecurity, or divergent viewpoints, the driving force remains one party&#xA;compelling another to yield. When stripped of its surface complexities, conflict&#xA;can be seen as a stark struggle to make the world—or another person—bend to our&#xA;own wishes, regardless of whether those wishes arise from genuine needs or mere&#xA;preferences.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Starting a Blog with Hugo, R Markdown, and Python (Reticulate)</title>
      <link>https://rdev.pages.dev/2025/02-11-starting-a-blog-with-hugo-r-markdown-and-python-reticulate/</link>
      <pubDate>Tue, 11 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://rdev.pages.dev/2025/02-11-starting-a-blog-with-hugo-r-markdown-and-python-reticulate/</guid>
      <description>&lt;style type=&#34;text/css&#34;&gt;&#xA;pre &gt; code.sourceCode { white-space: pre; position: relative; }&#xA;pre &gt; code.sourceCode &gt; span { line-height: 1.25; }&#xA;pre &gt; code.sourceCode &gt; span:empty { height: 1.2em; }&#xA;.sourceCode { overflow: visible; }&#xA;code.sourceCode &gt; span { color: inherit; text-decoration: inherit; }&#xA;div.sourceCode { margin: 1em 0; }&#xA;pre.sourceCode { margin: 0; }&#xA;@media screen {&#xA;div.sourceCode { overflow: auto; }&#xA;}&#xA;@media print {&#xA;pre &gt; code.sourceCode { white-space: pre-wrap; }&#xA;pre &gt; code.sourceCode &gt; span { text-indent: -5em; padding-left: 5em; }&#xA;}&#xA;pre.numberSource code&#xA;  { counter-reset: source-line 0; }&#xA;pre.numberSource code &gt; span&#xA;  { position: relative; left: -4em; counter-increment: source-line; }&#xA;pre.numberSource code &gt; span &gt; a:first-child::before&#xA;  { content: counter(source-line);&#xA;    position: relative; left: -1em; text-align: right; vertical-align: baseline;&#xA;    border: none; display: inline-block;&#xA;    -webkit-touch-callout: none; -webkit-user-select: none;&#xA;    -khtml-user-select: none; -moz-user-select: none;&#xA;    -ms-user-select: none; user-select: none;&#xA;    padding: 0 4px; width: 4em;&#xA;    color: #aaaaaa;&#xA;  }&#xA;pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }&#xA;div.sourceCode&#xA;  {   }&#xA;@media screen {&#xA;pre &gt; code.sourceCode &gt; span &gt; a:first-child::before { text-decoration: underline; }&#xA;}&#xA;code span.al { color: #ff0000; font-weight: bold; } /* Alert */&#xA;code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */&#xA;code span.at { color: #7d9029; } /* Attribute */&#xA;code span.bn { color: #40a070; } /* BaseN */&#xA;code span.bu { color: #008000; } /* BuiltIn */&#xA;code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */&#xA;code span.ch { color: #4070a0; } /* Char */&#xA;code span.cn { color: #880000; } /* Constant */&#xA;code span.co { color: #60a0b0; font-style: italic; } /* Comment */&#xA;code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */&#xA;code span.do { color: #ba2121; font-style: italic; } /* Documentation */&#xA;code span.dt { color: #902000; } /* DataType */&#xA;code span.dv { color: #40a070; } /* DecVal */&#xA;code span.er { color: #ff0000; font-weight: bold; } /* Error */&#xA;code span.ex { } /* Extension */&#xA;code span.fl { color: #40a070; } /* Float */&#xA;code span.fu { color: #06287e; } /* Function */&#xA;code span.im { color: #008000; font-weight: bold; } /* Import */&#xA;code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */&#xA;code span.kw { color: #007020; font-weight: bold; } /* Keyword */&#xA;code span.op { color: #666666; } /* Operator */&#xA;code span.ot { color: #007020; } /* Other */&#xA;code span.pp { color: #bc7a00; } /* Preprocessor */&#xA;code span.sc { color: #4070a0; } /* SpecialChar */&#xA;code span.ss { color: #bb6688; } /* SpecialString */&#xA;code span.st { color: #4070a0; } /* String */&#xA;code span.va { color: #19177c; } /* Variable */&#xA;code span.vs { color: #4070a0; } /* VerbatimString */&#xA;code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */&#xA;&lt;/style&gt;&#xA;&#xA;&#xA;&lt;p&gt;I always prioritize simplicity. While many opt for platforms like WordPress—replete with plugins and PHP-driven features—I find that those capabilities are often too cumbersome for a straightforward blog. Do you really need dynamic content for what is essentially static information?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pinephone emulation on qemu</title>
      <link>https://rdev.pages.dev/2020/07-09-pinephone-emulation-on-qemu/</link>
      <pubDate>Thu, 09 Jul 2020 10:40:33 +0200</pubDate>
      <guid>https://rdev.pages.dev/2020/07-09-pinephone-emulation-on-qemu/</guid>
      <description>&lt;p&gt;Have you heard about pinephone device ? It&amp;rsquo;s a $150 smartphone driven by open source community for the software, and pine64 team for the hardware.&lt;br&gt;&#xA;Most part of the hardware is also open.&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: right&#34;&gt;&lt;img src=&#34;https://rdev.pages.dev/2020/07-09-pinephone-emulation-on-qemu/pinephone.jpg&#34; alt=&#34;alt text&#34; title=&#34;Pinephone image&#34;&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: right&#34;&gt;• Allwinner A64 Quad Core&lt;br&gt;• Mali 400 MP2 GPU&lt;br&gt;• 2GB of LPDDR3 RAM  GPU&lt;br&gt;• 5.95″ LCD 1440×720 &lt;br&gt;•  HW switches: LTE/GNSS, WiFi, Microphone, Speaker, Cameras&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;I have implemented in qemu what is needed to emulate pinephone, but be warned, you will only get a serial console. Currently lima driver won&amp;rsquo;t work, because the pinephone GPU is not implemented on qemu.&lt;br&gt;&#xA;Also note that you will need to clone my qemu repo, because my patch is not (yet?) in official qemu release.&lt;/p&gt;</description>
    </item>
    <item>
      <title>1&#43;2&#43;3&#43;4&#43;5&#43;...=-1/12 ????</title>
      <link>https://rdev.pages.dev/2018/11-03-1-2-3-4-5-...-1/12/</link>
      <pubDate>Sat, 03 Nov 2018 14:53:25 +0000</pubDate>
      <guid>https://rdev.pages.dev/2018/11-03-1-2-3-4-5-...-1/12/</guid>
      <description>&lt;script type=&#34;text/javascript&#34;&#xA;  src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;&gt;&#xA;&lt;/script&gt;&#xA;&lt;p&gt;A few months ago I found an intersting youtube video explaining why we have $$\sum_{n=1}^{\infty} n = \frac{-1}{12}$$ .&lt;br&gt;&#xA;Wait &amp;hellip;. is it possible that the sum of positive number to equal to:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;a negative value ? &amp;#x1f632;&lt;/li&gt;&#xA;&lt;li&gt;a fractional number ? &amp;#x1f635;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;I don&amp;rsquo;t think so, but let&amp;rsquo;s dig into this.&lt;/p&gt;&#xA;&lt;p&gt;Here is the video I&amp;rsquo;m talking about:&lt;br&gt;&lt;/p&gt;&#xA;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/xqTWRtNDO3U&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&#xA;&lt;p&gt;Okay &amp;hellip; so let&amp;rsquo;s compute&#xA;$$&#xA;\sum_{n=1}^{\infty} n&#xA;$$&lt;/p&gt;</description>
    </item>
    <item>
      <title>Funny C code</title>
      <link>https://rdev.pages.dev/2018/08-15-funny-c-code/</link>
      <pubDate>Wed, 15 Aug 2018 20:53:25 +0000</pubDate>
      <guid>https://rdev.pages.dev/2018/08-15-funny-c-code/</guid>
      <description>&lt;p&gt;Here is something funny about C langage :)&lt;br&gt;&#xA;Watch carefuly this function below and try to guess what will this program print to the console.&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;c&#34;&gt;&#xA;#include &lt; stdio.h &gt;&#xA;&#xA;int main(void)&#xA;{&#xA;    int p[] = {0, 1, 2, 3, 4, 5, 6, 7};&#xA;    int i=3;&#xA;&#xA;    printf(&#34;i[%d]=%d\n&#34;, i, i[p]);&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Is this code correct ? If the answer is yes, then what doest printf print ?&lt;br&gt;&#xA;Well &amp;hellip; the answer is easy &amp;hellip;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Intel interview</title>
      <link>https://rdev.pages.dev/2017/03-15-intel-interview/</link>
      <pubDate>Wed, 15 Mar 2017 14:53:25 +0000</pubDate>
      <guid>https://rdev.pages.dev/2017/03-15-intel-interview/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://rdev.pages.dev/2017/03-15-intel-interview/intel_logo.jpg&#34; alt=&#34;alt text&#34; title=&#34;Logo Intel&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Do you want to work for Intel ?&lt;br&gt;&#xA;If you are curious, here is the test I did.&#xA;You are supposed to do it online and you have 2 hours.&lt;br&gt;&#xA;Unfortunately I don&amp;rsquo;t remember exactly the question I had.&lt;/p&gt;&#xA;&lt;h1 id=&#34;training-test&#34;&gt;Training test&lt;/h1&gt;&#xA;&lt;p&gt;Find a  palindrome in an array&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A is the array&lt;/li&gt;&#xA;&lt;li&gt;N is the size&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;There were other special condition that I forgot, sorry.&lt;/p&gt;&#xA;&lt;p&gt;Example:&lt;br&gt;&#xA;A={-1,3,-4,5,1,-6,2,1};&lt;br&gt;&#xA;You can return 1 because&lt;br&gt;&#xA;-1 = -4+5+1-6+2+1&lt;br&gt;&#xA;If there is several solutions, then you can choose which to return.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mysterious cltq x86 instruction</title>
      <link>https://rdev.pages.dev/2017/02-18-mysterious-cltq-x86-instruction/</link>
      <pubDate>Sat, 18 Feb 2017 23:10:20 +0000</pubDate>
      <guid>https://rdev.pages.dev/2017/02-18-mysterious-cltq-x86-instruction/</guid>
      <description>&lt;p&gt;Today I was working on some ugly C code and faced a strange issue:&lt;br&gt;&#xA;a returned value by a function was different when we are back to the caller.&#xA;&lt;br&gt;&#xA;And no, it&amp;rsquo;s not a gcc bug ;)&lt;br&gt;&#xA;Let&amp;rsquo;s talk about that !&lt;br&gt;&#xA;&lt;br&gt;&#xA;create 2 files, file1.c and file2.c like this.&#xA;File1.c:&lt;br&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;C&#34;&gt;&#xA;#include &lt; stdio.h&gt;&#xA;&#xA;int main(int argc, char* argv[])&#xA;{&#xA;&#x9;void* p = (void*)test_return();&#xA;&#x9;printf(&#34;p = %p\n&#34;, p);&#xA;&#x9;return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;file2.c:&lt;br&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
